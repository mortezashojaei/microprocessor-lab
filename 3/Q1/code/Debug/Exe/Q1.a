;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Q1
;Version :
;Date    : 12/20/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
; int Numbers[10] = {0b00111111 , 0b00000110 , 0b01011011 , 0b01001111 , 0b01100110 , 0b01101101 , 0b01111101 , 0b0000011 ...

	.DSEG
; int counter=0;
; int i =0;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 
; 0000 0022     ++counter;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0023         if(counter == 100 ){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0024 
; 0000 0025           if(i < 10){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0026            PORTD =  Numbers[i];
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0027          }else{
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0028            i = 0 ;
;PCODE: $00000020 VOL: 0
; 0000 0029            PORTD = Numbers[i];
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002A 
; 0000 002B          }
;PCODE: $00000027 VOL: 0
; 0000 002C 
; 0000 002D          i++;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002E 
; 0000 002F         }
; 0000 0030 
; 0000 0031     TCNT1H=0xFF;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0032     TCNT1L=0xF0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0033 
; 0000 0034 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;void main(void)
; 0000 0037 {
;PCODE: $00000033 VOL: 0
; 0000 0038 // Declare your local variables here
; 0000 0039 
; 0000 003A DDRD=0b11111111;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003B PORTD=0b00000000;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003C 
; 0000 003D TCCR1A=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003E TCCR1B=0x01;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003F TCNT1H=0xFF;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0040 TCNT1L=0xF0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0041 
; 0000 0042 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0043 
; 0000 0044 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0045 MCUCSR=(0<<ISC2);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0046 
; 0000 0047 
; 0000 0048 #asm("sei")
;PCODE: $00000046 VOL: 0
	sei
;PCODE: $00000047 VOL: 0
; 0000 0049 
; 0000 004A while (1)
;PCODE: $00000048 VOL: 0
; 0000 004B       {
; 0000 004C 
; 0000 004D       }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004E }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
